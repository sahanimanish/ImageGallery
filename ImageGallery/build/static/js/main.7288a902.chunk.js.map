{"version":3,"sources":["Component/SearchImage.js","api/Pixels.js","Component/ImageDetail.js","Component/ImageCard.js","Component/ImageList.js","Component/App.js","serviceWorker.js","index.js"],"names":["SearchImage","state","term","onFormSubmit","e","preventDefault","_this","props","onSubmit","_this2","this","react_default","a","createElement","className","type","value","onChange","setState","target","Component","axios","create","baseURL","headers","Authorization","ImageDetail","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","Image","Fragment","Modal","show","size","onHide","handleHide","dialogClassName","centered","Body","src","current","currentSrc","alt","console","log","React","ImageCard","onSelectImage","img","selectedImg","setSpan","height","imageRef","clientHeight","spans","Math","ceil","createRef","addEventListener","_this$props$Images","Images","photographer","style","gridRowEnd","concat","onClick","large","ref","Component_ImageDetail","ImageList","map","image","ImageCard_ImageCard","key","id","App","onSearchSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","pixels","get","params","query","per_page","page","sent","images","data","photos","stop","_x","apply","arguments","floor","random","SearchImage_SearchImage","padding","Component_ImageList","Boolean","window","location","hostname","match","ReactDOM","render","Component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7288a902.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class SearchImage extends Component {\n\n  state = {\n    term: ''\n  };\n  onFormSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state.term);\n  }\n  render() {\n    return (\n      <div className=\"back\">\n        <h1 > The best free stock photos shared by talented photographers.\n        </h1>\n        <div className=\"ui segment\">\n          <form className=\"ui form\" onSubmit={this.onFormSubmit}>\n            <div className=\"field\">\n              <label >Search Images</label>\n              <input type=\"text\"\n                value={this.state.term}\n                onChange={e => this.setState({ term: e.target.value })}\n              />\n            </div>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://api.pexels.com/v1',\n  headers: {\n    Authorization: '563492ad6f917000010000010d96189e9b1c41c497b0c04a47c78ef4'\n  }\n})\n","import React from 'react';\nimport { Modal } from 'react-bootstrap';\n\n\nclass ImageDetail extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n\n    if (!this.props.Image) {\n      console.log('hello im rerender');\n      return null;\n    }\n    return (\n      <>\n\n        <Modal\n          show={this.props.show}\n          size=\"lg\"\n          onHide={this.props.handleHide}\n          dialogClassName=\"modal-90w\"\n          centered\n        >\n\n          <Modal.Body >\n            <img src={this.props.Image.current.currentSrc} alt={this.props.Image.current.alt} className=\"model\" />\n          </Modal.Body>\n\n        </Modal>\n\n      </>\n    );\n  }\n}\n\n\n\nexport default ImageDetail;\n\n\n\n\n\n","import React, { Component } from 'react';\nimport ImageDetail from './ImageDetail';\n\nexport default class ImageCard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      spans: 0,\n      selectedImg: null,\n      show: false\n    }\n    this.imageRef = React.createRef();\n\n    this.handleHide = () => {\n      this.setState({ show: !this.state.show });\n    };\n  }\n  componentDidMount() {\n    this.imageRef.current.addEventListener('load', this.setSpan);\n  }\n\n  onSelectImage = img => {\n\n    this.setState({ selectedImg: img, show: true });\n    console.log(this.state.selectedImg);\n    console.log('after changes', this.state.show);\n\n  }\n\n  setSpan = () => {\n    const height = this.imageRef.current.clientHeight;\n    const spans = Math.ceil(height / 10);\n    this.setState({ spans });\n  }\n\n  render() {\n    const { photographer, src } = this.props.Images;\n    return (\n      <>\n        <div style={{ gridRowEnd: `span ${this.state.spans}` }} onClick={() => this.onSelectImage(this.imageRef)}>\n          <img src={src.large} alt={photographer} ref={this.imageRef} />\n        </div>\n        <ImageDetail Image={this.state.selectedImg} show={this.state.show} handleHide={\n          this.handleHide} />\n      </>\n    )\n  }\n}\n","import './imagelist.css';\nimport React from 'react';\nimport ImageCard from './ImageCard';\n\nconst ImageList = props => {\n  const Images = props.Images.map(image => {\n    return <ImageCard\n      key={image.id}\n      Images={image}\n    />\n  });\n\n  return < div className=\"image-list\" > {Images}</div >\n\n}\n\nexport default ImageList;","import React, { Component } from 'react';\nimport SearchImage from './SearchImage';\nimport pixels from '../api/Pixels';\nimport ImageList from './ImageList';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: []\n    }\n  }\n\n  componentDidMount() {\n    const STerms = ['images', 'computers', 'Nature', 'Buildings', 'Cars', 'Models', 'Animals'];\n    const term = Math.floor(Math.random() * 6);\n    this.onSearchSubmit(STerms[term]);\n  }\n\n  onSearchSubmit = async (term) => {\n    const response = await pixels.get('/search', {\n      params: {\n        query: term,\n        per_page: 80,\n        page: 1\n      }\n    })\n    this.setState({ images: response.data.photos });\n\n\n  }\n\n  render() {\n    return (\n      <div  >\n        <div className=\"back1\">\n          <div className=\"ui container\" >\n\n            <SearchImage onSubmit={\n              this.onSearchSubmit} />\n          </div>\n\n        </div>\n\n        <div style={{ padding: '25px 40px' }}>\n          <ImageList Images={this.state.images} />\n        </div >\n\n      </div>\n    )\n  }\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Component/App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}